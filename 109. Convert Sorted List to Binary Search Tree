//109. Convert Sorted List to Binary Search Tree
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if (head==null){
            return null;
        } 
        ListNode faster = head;
        ListNode slower = head;
        ListNode prev = null;

        while(faster != null && faster.next!=null){
            faster = faster.next.next;
            prev = slower;
            slower = slower.next;
        }
        if(prev != null){
            prev.next = null;
        }
        else{
            head = null;
        }
        TreeNode root = new TreeNode(slower.val);
        TreeNode left = sortedListToBST(head);
        TreeNode right = sortedListToBST(slower.next);
        
        root.left = left;
        root.right = right;

        return root;

    }
}
